========== HOMEWORK X ==========
   RECOGNIZE MUS-ROVER RULES
================================

---------------
Tetra-chords

	[ Definition ]
		A tetra-chord is a chord containing any 4 pitches together.
		It is represented by a VECTOR of 4 integers (called MIDI numbers).
		In addition, we use a special character nan (called not-a-number) to denote a rest.
		Every dimension of a chord vector denotes a voice:
			1 - Soprano
			2 - Alto
			3 - Tenor
			4 - Bass

	[ Examples ]
		c1 = (60, 52, 77, 60)
		c2 = (32, nan, 69, nan)

---------------
Windows

	[ Definition ]
		A window is a sequence of indices (1-based) that select certain dimension(s).

	[ Examples ]
		w1 = (1, 3, 4)
		w2 = (1, )

		* Apply w1 to c1 yields: w1(c1) = (60, 77, 60)
		* Apply w1 to c2 yields: w1(c2) = (32, 69, nan)
		* Apply w2 to c1 yields: w2(c1) = (60, )
		* Apply w2 to c2 yields: w2(c2) = (32, )

---------------
Descriptors

	[ Definition ]
		A descriptor is a function that performs an arithmetic operation on a chord.

	[ Examples ]
		mod_12, diff, sort, order (a well-defined argsort)

		* Apply mod_12 to c1 yields: mod_12(c1) = (0, 4, 5, 0)
		* Apply mod_12 to c2 yields: mod_12(c2) = (8, nan, 9, nan)
		* Apply   diff to c1 yields:   diff(c1) = (12, -25, 17)
		* Apply   diff to c2 yields:   diff(c2) = (nan, nan, nan)
		* Apply   sort to c1 yields:   sort(c1) = (52, 60, 60, 77)
		* Apply   sort to c2 yields:   sort(c2) = (32, 69, nan, nan)
		* Apply  order to c1 yields:  order(c1) = '2<4=1<3'
		* Apply  order to c2 yields:  order(c2) = '1<3!2!4'
		
	[ Note ]
		nan%12==nan, anything-nan==nan, nan-anything==nan,
		when sorting, nan is always put towards the end.

---------------
Features

	[ Definition ]
		A feature is a function which is the composition of
		a window function, and one or more descriptors.

	[ Examples ]
		w1 * mod_12 * diff * sort

		* Apply the above feature to c1 means:
			sort( diff( mod_12( w1( c1 ) ) ) )
		  = sort( diff( mod_12( (60, 77, 60) )))
		  = sort( diff( (0, 5, 0) ))
		  = sort( (-5, 5) )
		  = (-5, 5)

---------------
N-grams

	[ Definition ]
		An n-gram is a contiguous sequence of n chords.
		Given an n-gram, we query the following probability distribution:
			the probability distribution CONDITIONED on the previous (n-1) chords
		Therefore,
		* in a 3-gram (or ngram = 3), we consider:
			the probability distribution conditioned on the previous 2 chords;
		* in a 2-gram (or ngram = 2), we consider:
			the probability distribution conditioned on the previous 1 chord;
		* in a 1-gram (or ngram = 1), we consider:
			the UNCONDITIONAL probability distribution regardless of any previous chord(s). 

	[ Examples ]
		ngram = 1 (no conditional)
		ngram = 2 (contains a conditional, or cond in short, involving 1 previous chord)
		ngram = 3 (contains a conditional, or cond in short, involving 2 previous chords)
		...

		There exist two special values for any conditional regardless of the feature:
		* s: the start of a piece
		* e: the   end of a piece
		Therefore,
		* conditioned on s (or cond = s) means the current chord is the first/beginning chord;
		* probability of e means probability of an ending, or more precisely,
		  probability of the current chord being an ending.

---------------
Rules

	[ Definition ]
		Every rule in this homework is represented by a histogram under
		* a given feature, and
		* a given ngram, and
		* a given cond(itional) if ngram > 1
		Every feature is indexed by a unique id called pid;
		every feature (content) is represented by a window followed one or more descriptors.

	[ Examples ]
		[ pid=68, ngram=2, cond=7 ] uniquely indexes a 2-gram rule.
		More specially, this is a 2-gram rule, with feature pid=68.
		Further, (the content of) feature pid=68 is (1, 4) * diff * mod_12,
		i.e. first applying window (1, 4) to a chord, and then
		descriptor diff followed by descriptor mod_12.
		So, below is how one reads this rule mechanically (literally):
			First, considering the feature (1, 4) * diff * mod_12,
			second, conditioned on the previous chord having a feature value 7,
			the probability distribution of the top few most probable feature values
			of the current chord is given by the histogram.

		[ pid=68, ngram=2, cond=s ] uniquely indexes another 2-gram rule.
		One can read this rule mechanically (literally) as follows:
			First, considering the feature (1, 4) * diff * mod_12,
			second, conditioned on the previous chord having a feature value s
			(this means the current chord is the first/beginning chord of a piece),
			the probability distribution of the top few most probable feature values
			of the current chord (in this case, the first chord) is given by the histogram.

		[ pid=68, ngram=1 ] uniquely indexes a 1-gram rule.
		One can read this rule mechanically (literally) as follows:
		First, considering the feature (1, 4) * diff * mod_12,
		second, regardless of any previous chord(s),
		the (unconditional) probability distribution of the top few most probable feature values
		of the current chord is given by the histogram.




